基础知识
程序基本组成：包含（include）头文件，主函数（main）
用#include <>来引用一个头文件的
用#include “”来引用一个.c文件的
引用后可以直接将外部函数作为全局变量
数据类型：
char			//字符数据类型		1Byte
short			//短整型				2Byte
int				//整型					4Byte
long			//长整形				4Byte
long long		//更长的整型			8Byte
float			//单精度浮点型		4Byte
double			//双精度浮点型		8Byte
不同的数据类型是为了规定不同大小的空间
建立变量的本质是为某个值申请存储空间

字符表达：单字符用’’，字符串用””（即单双引号）
定义变量：数据类型 变量名 = 值（int age = 18;）
变量类型：全局变量、局部变量
         在局部变量和全局变量名相同时局部优先（不会报错）
         尽量不要将局部与全局的名称设为相同
         变量创建时要记得初始化，赋予一个方便的值
外部变量：extern 声明外部变量（extern int a;）
变量作用域：变量可以作用的范围
变量生命周期：在变量作用域开始时开始，结束时结束
          全局变量的生命周期是整个程序的生命周期
格式输出控制字符：
        %d：输出十进制整数
        %f：输出浮点数
        %s：输出字符串
         %c：输出字符
        需要注意的是，输出项的个数要与格式控制字符串中的转换		  说明符一一对应，否则会产生输出错误。
常量：字面常量
    const修饰的常变量
    #define定义的标识符常量
    枚举常量
字面常量：某个直接可见的常量值，如100，24，’a’，”abcdef”
const修饰的常变量：格式：const int a = 20
                        此时的a仍然是变量的属性，但是后续不能被修	改，相当于被锁定，被锁定的变量
标识符常量：用某个名字来作为某个常量的标识，如	
            #define MAX 100	
            意思是用MAX来作为100的标识，MAX就相当于100
            这并非赋值，MAX会具有100的所有属性，相当于人	的称号
            对于定义的常量，习惯性使用大写字母来定义
枚举常量：定义一个新类型时，定义在类型中的各个常量就称为枚举常量

字符串：C语言中没有字符串类型，由双引号引起来的一串字符称为字符串字面值，简称字符串
        字符串的结束标志是一个\0的转义字符，在使用双引号引起来的字符串时会有一个隐藏的\0跟在字符串后面，在计算字符串长度、打印字符串等需要读取字符串内容的时候需要一个\0来作为结束标志，
        如果在打印一个单独定义的数组中的字符串时该字符串后面没有\0就会向该数组所在	内存空间的后面继续读取，直到遇到\0（终止密码子）
        /0在数组中作为一个字符存储，但是打印和计算长度时都	不会被计算在内
转义字符：
        1.\n：换行符，用来从下一行的开头输出文本。
        2.\t：制表符，相当于四个空格或者按下 tab 键。
        3.\'：表示单引号。
        4.\\"：表示双引号。
        5.\\\：表示反斜杠本身。
        6.\xhh：十六进制转义，可以表示任意字符。
        7.\0：空字符。
        8.\ddd：1到3位八进制数所代表的任意字符。
        9.\a：响铃符。
        10.\b：退格符。
        11.\f：换页符。
        12.\r：回车符。
        \ddd：即在反斜杠后面写三个数字，编码器会将它作为八进制的一个数求出其十进制对应的数，以这个十进制的数对应ASCII码中的编码对应的符号
                如输入”\130”，130的八进制转化为十进制就是88，ASCII	表中的88号就是字母X，则此处返回X
        \xdd：将x后面的两个数字视为十六进制转化为十进制并返回对应ASCII码值
                所有转义字符在编码器中都被视为一个字符
注释：单行注释//，多行注释/**\（/*开始，*\结束）
        多行注释不能嵌套注释，最好用单行注释结合快捷键
        

更新时间：
2024/7/10
2024/7/11
2024/7/12
2024/7/15
2024/7/16





















